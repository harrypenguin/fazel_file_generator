# Licensed under the GPLv3 - see LICENSE

import numpy as np
import pytest
from numpy.testing import assert_array_equal

from fazel_file_generator.rasters import zigzag, spiral

class TestRasters:
    @pytest.mark.parametrize(
        "n, origin, expected", [
            (1, False, [(-1, 1), (-1, 0), (-1, -1),
                        (0, -1), (0, 0), (0, 1),
                        (1, 1), (1, 0), (1, -1)]),
            (1, True, [(0, 0),
                       (-1, 1), (-1, 0), (-1, -1),
                       (0, -1), (0, 0), (0, 1),
                       (1, 1), (1, 0), (1, -1),
                       (0, 0)]),
            (1, None, [(-1, 1), (-1, 0), (-1, -1),
                       (0, -1), (0, 0), (0, 1),
                       (1, 1), (1, 0), (1, -1)]),
            (2, False, [(-2, 2), (-2, 1), (-2, 0), (-2, -1), (-2, -2),
                        (-1, -2), (-1, -1), (-1, 0), (-1, 1), (-1, 2),
                        (0, 2), (0, 1), (0, 0), (0, -1), (0, -2),
                        (1, -2), (1, -1), (1, 0), (1, 1), (1, 2),
                        (2, 2), (2, 1), (2, 0), (2, -1), (2, -2)]),
            (2, True, [(0, 0), (-1, 1),
                       (-2, 2), (-2, 1), (-2, 0), (-2, -1), (-2, -2),
                       (-1, -2), (-1, -1), (-1, 0), (-1, 1), (-1, 2),
                       (0, 2), (0, 1), (0, 0), (0, -1), (0, -2),
                       (1, -2), (1, -1), (1, 0), (1, 1), (1, 2),
                       (2, 2), (2, 1), (2, 0), (2, -1), (2, -2),
                       (1, -1), (0, 0)]),
            (2, None, [(-1, 1),
                       (-2, 2), (-2, 1), (-2, 0), (-2, -1), (-2, -2),
                       (-1, -2), (-1, -1), (-1, 0), (-1, 1), (-1, 2),
                       (0, 2), (0, 1), (0, 0), (0, -1), (0, -2),
                       (1, -2), (1, -1), (1, 0), (1, 1), (1, 2),
                       (2, 2), (2, 1), (2, 0), (2, -1), (2, -2),
                       (1, -1)]),
            ]
        )
    def test_zigzag(self, n, origin, expected):
        scan = zigzag(n, origin)
        expected = np.array(expected, dtype=[("x", "f"), ("y", "f")])
        assert_array_equal(scan, expected)

    @pytest.mark.parametrize(
        "n, origin, expected", [
            (1, False, [(0, 0), (0, 1), (-1, 1),
                        (-1, 0), (-1, -1),
                        (0, -1), (1, -1),
                        (1, 0), (1, 1)]),
            (1, True, [(0, 0), (0, 1), (-1, 1),
                       (-1, 0), (-1, -1),
                       (0, -1), (1, -1),
                       (1, 0), (1, 1), (0, 0)]),
            (1, None, [(0, 1), (-1, 1),
                       (-1, 0), (-1, -1),
                       (0, -1), (1, -1),
                       (1, 0), (1, 1)]),
            (2, False, [(0, 0), (0, 1), (-1, 1),
                        (-1, 0), (-1, -1),
                        (0, -1), (1, -1),
                        (1, 0), (1, 1), (1, 2),
                        (0, 2), (-1, 2), (-2, 2),
                        (-2, 1), (-2, 0), (-2, -1), (-2, -2),
                        (-1, -2), (0, -2), (1, -2), (2, -2),
                        (2, -1), (2, 0), (2, 1), (2, 2)]),
            (2, True, [(0, 0), (0, 1), (-1, 1),
                       (-1, 0), (-1, -1),
                       (0, -1), (1, -1),
                       (1, 0), (1, 1), (1, 2),
                       (0, 2), (-1, 2), (-2, 2),
                       (-2, 1), (-2, 0), (-2, -1), (-2, -2),
                       (-1, -2), (0, -2), (1, -2), (2, -2),
                       (2, -1), (2, 0), (2, 1), (2, 2),
                       (1, 1), (0, 0)]),
            (2, None, [(0, 1), (-1, 1),
                       (-1, 0), (-1, -1),
                       (0, -1), (1, -1),
                       (1, 0), (1, 1), (1, 2),
                       (0, 2), (-1, 2), (-2, 2),
                       (-2, 1), (-2, 0), (-2, -1), (-2, -2),
                       (-1, -2), (0, -2), (1, -2), (2, -2),
                       (2, -1), (2, 0), (2, 1), (2, 2),
                       (1, 1)]),
            ]
        )
    def test_spiral(self, n, origin, expected):
        scan = spiral(n, origin)
        expected = np.array(expected, dtype=[("x", "f"), ("y", "f")])
        assert_array_equal(scan, expected)
